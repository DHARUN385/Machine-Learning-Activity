from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imblearn.over_sampling import SMOTE
import pandas as pd
import numpy as np

# Simulate transaction data
data = pd.DataFrame({
    'transaction_amount': np.random.rand(1000) * 1000,
    'location': np.random.randint(1, 20, 1000),
    'user_behavior_score': np.random.rand(1000),
    'is_fraud': np.concatenate((np.zeros(950), np.ones(50)))  # Imbalanced classes
})

# Define features and target
X = data[['transaction_amount', 'location', 'user_behavior_score']]
y = data['is_fraud']

# Apply SMOTE for oversampling
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Fit logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate predictions
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
